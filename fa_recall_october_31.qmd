---
title: "FA_Recall_Investigation"
format: html
editor: source
---

```{r}
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, here, DBI, odbc, padr, scales)

```

```{r}
tryCatch({  # Attempts the database connection and catches any errors
    db_connection <- DBI::dbConnect(odbc::odbc(),  # Creates a connection using the ODBC driver
                             Driver="SnowflakeDSIIDriver",  # Specifies the Snowflake ODBC driver
                             Server="hawaiianair.west-us-2.azure.snowflakecomputing.com",  # Points to the Snowflake server
                             WAREHOUSE="DATA_LAKE_READER",  # Selects the data warehouse
                             Database="ENTERPRISE",  # Selects the Enterprise database
                             UID= Sys.getenv("UID"),  # Retrieves the user ID from the environment variables
                             authenticator = "externalbrowser")  # Uses external browser authentication
    print("Database Connected!")  # Prints a message if the connection is successful
    },
    error=function(cond) {  # Defines error handling if the connection fails
            print("Unable to connect to Database.")  # Prints an error message
})

# Set search_path
dbExecute(db_connection, "USE SCHEMA CREW_ANALYTICS")  # Sets the working schema to 'CREW_ANALYTICS' in the database

q_master_history <- "SELECT * FROM CT_MASTER_HISTORY WHERE PAIRING_DATE = '2024-10-31';"

ms <- dbGetQuery(db_connection, q_master_history) 


```

```{r}

t <- ms %>% 
  filter(CREW_INDICATOR == "FA")

rlv_FAs <- ms %>% 
  mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>% 
  group_by(CREW_ID, PAIRING_NO, PAIRING_DATE) %>% 
  filter(update_dt == max(update_dt), 
         CREW_INDICATOR == "FA",
         TRANSACTION_CODE %in% c("RLV")) %>% 
  ungroup() %>% 
  select(CREW_ID) %>% 
  distinct()
  
flv_counts <- ms %>% 
  mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>% 
  group_by(CREW_ID, PAIRING_NO, PAIRING_DATE) %>% 
  filter(update_dt == max(update_dt), 
         CREW_INDICATOR == "FA",
         TRANSACTION_CODE %in% c("RLV")) %>% 
  ungroup()  %>% 
  group_by(PAIRING_DATE, BASE) %>% 
  summarize(RLV_Counts = n_distinct(CREW_ID),
            .groups = "drop")


explore_asn <- ms %>% 
  filter(CREW_ID %in% rlv_FAs$CREW_ID) %>% 
  mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>% 
  group_by(CREW_ID) %>% 
  filter(update_dt == max(update_dt),
         TRANSACTION_CODE %in% c("ASN")) %>% 
  ungroup() %>% 
  group_by(BASE) %>% 
  summarize(#RLV_Counts = n_distinct(CREW_ID),
            ASN_Counts = n_distinct(CREW_ID), .groups = "drop")


explore_drop <- ms %>% 
  filter(CREW_ID %in% rlv_FAs$CREW_ID) %>% 
  mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>% 
  group_by(CREW_ID) %>% 
  filter(update_dt == max(update_dt), 
         TRANSACTION_CODE %in% c("SOP", "2SK", "FLV", "UNA", "FLS", "FLU", "N/S", "PER", "MGR", "RSK")) %>% 
  ungroup() %>% 
  group_by(PAIRING_DATE, BASE) %>% 
  summarize(#RLV_Counts = n_distinct(CREW_ID),
            Drop_Counts = n_distinct(CREW_ID), .groups = "drop")


```

```{r}

transaction_path <- ms %>% 
  filter(CREW_ID %in% rlv_FAs$CREW_ID) %>% 
  mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>% 
  group_by(CREW_ID) %>% 
  #filter(update_dt == max(update_dt)) %>% 
  arrange(CREW_ID, update_dt) # Sort by CREW_ID

write_csv(transaction_path, here("October_31_FA_Transaction_Paths.csv"))
```

